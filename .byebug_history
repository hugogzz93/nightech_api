c
@representative
@otherUser
c
response.body
@otherUser
@representative
c
continue
current_user
representative
puts caller
n
c
n
continue
response.body
response
continue
@representative_attributes["name"]
@representative_attributes[:name]
@representative_attributes
c
representative_response
n
continue
n
representative_response
c
representative.valid?
c
representative.valid?
representative
c
n
exit
self.valid?
self
self.valid?
self
representative
c
n
puts caller.inspect
puts caller
continue
user.organization
user.organizatin
user
organization
organization == user.organization
c
s
user
organization
organization == user.organization
c
n
user
organization
continue
organization
user.organization
user
continue
reservation_update_params["s"] == "accepted"
reservation_update_params["s"]
reservation_update_params["status"]
Reservation.status
Reservation.accepted.count
Reservation.accepted
Reservation
c
@reservation.service
c
self.service
service
c
Service.any?
continue
date + 1
date = DateTime.now
reservation_update_params.key?("status")
reservation_update_params
params.key?("status")
params
exit
reservation.changed?
reservation.status
reservation_update_params
reservation.changed?
reservation.dirty?
reservation
c
authorized_for_res_update(current_user, reservation)
current_user.credentials
current_user
c
UserSerializer.new(user).to_json
c
n
c
n
user.valid?
user
n
c
current_user
c
current_user
c
service.valid?
service.errors.messages
service.errors
service
n
service_params
c
reservation.accepted?
reservation.update(reservation_update_params)
n
c
params
c
params[:id]
params
c
params[:id]
params[:id[
params
c
reservation_update_params
reservation
n
params[:id]
c
a = ActiveModel::ArraySerializer.new(services, each_serializer: ServiceSerializer).as_json
services.count
services
abort
continue
c
a.as_json
a.to_json
a = ActiveModel::ArraySerializer.new(services, each_serializer: ServiceSerializer).as_json
a  =     debugger
a
c
TableSerializer.new(Table.first).as_json
a.to_json.class.name
a.as_json.class.name
a.to_json
a.as_json
a
a = ActiveModel::ArraySerializer.new(services, each_serializer: ServiceSerializer)
c
serialization_options
options
c
serialization_options
context
c
s
context
self.serialization_options
methods
date
keys
self.class.name
self
continue
c
continue
c
methods
self
self.attributes
self.serialization_options
attributes
self.class.name
self
c
self
attributes
serialization_options
options
@options
continue
object
c
object
object.reload!
object.services
Service.all
FactoryGirl.create :service, table: Table.first
Service.all
object.services
object
c
serialization_options[:date]
date
c
render json: Table.all, status: 200, date: date
c
render json: Table.all, date: DateTime.now + 12
a = render json: Table.all, date: DateTime.now + 12
a = render json: Table.all
render json: Table.all
Table.all.count
Table.all
c
date = DateTime.now
c
date = DateTime.now
c
date = DateTime.now
c
date = DateTime.now
c
date = DateTime.now
c
date = DateTime.now
c
date = DateTime.now
c
date = DateTime.now
c
date = DateTime.now
c
date = DateTime.now
c
date = DateTime.now
object
c
date = DateTime.now
object
cc
c
services
c
services
c
serialization_options[:date]
services
c
serialization_options
object
abort
continue
a
c
cc
c
cc
c
serialization_options[:date]
