exit
@user_response[:users][-1][:email]
@user_response[:users][0][:email]
@user_response[:users].collect { |x| x.email }
@subordinate_users.collect { |x| x.email }
@user_response[:users][0]
@user_response[:users]
@subordinate_users.count
@subordinate_users
n
exit
@existing_user.organization
@user_response[:organization]
@user_response
c
@user_attributes["credentials"] = "coordinator"
@user_attributes["credentials"]
c
@user_attributes
exit
@user_response[:users].count
@user_response
c
User.where(organization: current_user.organization).where.not(id: current_user.id).count
current_user.super?
c
User.where(organization: current_user.organization).where.not(id: current_user.id).count
current_user.super?
exit
User.where(organization: current_user.organization).where.not(id: current_user.id).count
User.where(organization: current_user.organization).where.not(id: current_user.id)
User.where(organization: current_user.organization).where.not(user_id: current_user.id).count
User.where(organization: current_user.organization).where.not(user_id: current_user.id)
User.where(organization: current_user.organization).count
User.where(organization: current_user.organization).collect { |x| x.organization.name }
User.where(organization: current_user.organization).collect { |x| x.organization }
User.where(organization: current_user.organization).count
User.where(organization: current_user.organization)
current_user.super?
n
service
n
c
@service
n
c
@service
c
@service
c
service.valid?
c
n
service.valid?
service.errors.messages
service
c
@service_attributes
c
exit
a.table
a = FactoryGirl.attributes_for :service, user: nil, administrator: nil, reservation: nil, organization:nil, table: @table
a.table
a = FactoryGirl.attributes_for :service, user: nil, administrator: nil, reservation: nil, organization:nil, table: nil
a.table
a = FactoryGirl.attributes_for :service, user: nil, administrator: nil, reservation: nil, organization:nil
a = FactoryGirl.attributes_for :service, user: nil, administrator: nil, reservation: nil
@table
@service_attributes
@service_attributes.table_id
@service_attributes.table
@service_attributes
n
@service_attributes
n
@table
c
Table.all
service.table_id
service.valid?
@table
c
n
@table
continue
@service_attributes
c
n
c
n
c
reservation_response[0][:client]
reservation_response[0]
reservation_response
n
json_response[:reservations]
c
n
reservations
c
n
reservations
c
@representative
@otherUser
c
response.body
@otherUser
@representative
c
continue
current_user
representative
puts caller
n
c
n
continue
response.body
response
continue
@representative_attributes["name"]
@representative_attributes[:name]
@representative_attributes
c
representative_response
n
continue
n
representative_response
c
representative.valid?
c
representative.valid?
representative
c
n
exit
self.valid?
self
self.valid?
self
representative
c
n
puts caller.inspect
puts caller
continue
user.organization
user.organizatin
user
organization
organization == user.organization
c
s
user
organization
organization == user.organization
c
n
user
organization
continue
organization
user.organization
user
continue
reservation_update_params["s"] == "accepted"
reservation_update_params["s"]
reservation_update_params["status"]
Reservation.status
Reservation.accepted.count
Reservation.accepted
Reservation
c
@reservation.service
c
self.service
service
c
Service.any?
continue
date + 1
date = DateTime.now
reservation_update_params.key?("status")
reservation_update_params
params.key?("status")
params
exit
reservation.changed?
reservation.status
reservation_update_params
reservation.changed?
reservation.dirty?
reservation
c
authorized_for_res_update(current_user, reservation)
current_user.credentials
current_user
c
UserSerializer.new(user).to_json
c
n
c
n
user.valid?
user
n
c
current_user
c
current_user
c
service.valid?
service.errors.messages
service.errors
service
n
service_params
c
reservation.accepted?
reservation.update(reservation_update_params)
n
c
params
c
params[:id]
params
c
params[:id]
params[:id[
params
c
reservation_update_params
reservation
n
params[:id]
c
a = ActiveModel::ArraySerializer.new(services, each_serializer: ServiceSerializer).as_json
services.count
services
abort
continue
c
a.as_json
a.to_json
a = ActiveModel::ArraySerializer.new(services, each_serializer: ServiceSerializer).as_json
a  =     debugger
a
c
TableSerializer.new(Table.first).as_json
a.to_json.class.name
a.as_json.class.name
a.to_json
a.as_json
a
