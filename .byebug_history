abort
@user.subordinates.count
@user.subordinates
@user
user_response[:users]
user_response
exit
@deletee.belongs_to? @user
@user.supervisor
@user.subordinates
@user
@deletee.supervisor
@user.subordinates
@user
@deletee
abort
current_user
c
@deletee.supervisor
@user
@deletee
c
abort
user.belongs_to?(current_user)
current_user.subordinates
current_user
authorized_for_deletion(current_user, user)
c
@deletee.belongs_to?(@user)
c
authorized_for_deletion(current_user, user)
current_user
c
@user.credentials
@user
abort
@user
n
@user
c
user
c
user
current_user
abort
deleter
abort
user_response[:us
user_response
n
user_response
c
updated_attributes
n
current_user.credentials
abort
c
user_response
n
@user.credentials
@user
c
updated_attributes
n
abort
current_user.credentials
current_user
abort
params.has_key?(:userer)
params.has_key?(:user)
params.class.name
params.has_hey?(:user)
params
params[:dog].any?
params[:user].any?
params[:user]
params
updated_attributes
n
c
updatee.class.name
updater.class.name
updater
continue
c
updatee.class.name
updater.class.name
updater
abort
self_update_user_params.empty?
abort
user_params
user.update(self_update_user_params)
user.update(self_update_user_params(
self_update_user_params
abort
aborrt
c
self_update_user_params
user
c
exit
@new_user.supervisor.present?
@new_user.supervisor.id
@new_user.belongs_to?(@user)
@new_user
@user
abort
current_user.outranks? user
abort
user_response
abort
self.errors.any?
self.errors
self
abort
user.valid?
user.errors.any?
user
c
user
c
user.errors
user.errors.any?
user
n
user
current_user.credentials
user.credentials
user
current_user.credentials
c
current_user.credentials
c
current_user.credentials
c
current_user.credentials
current_user
c
current_user.credentials
user
n
c
user
n
user
abort
user.errors.any?
user.errors
user
n
abort
user.errors.any?
user.errors
user
user.errors.add(:credentials, "Insufficient priviledges")
user.errors.add(:credentials, "Insufficient priviledges") unless creating_user.outranks?(new_user)
user.errors.any?
user.errors
user
n
user
abort
user_response
abort
current_user.can_create?(user_params)
current_user
abort
a
current_user
c
a
c
current_user
c
authentication.current_user
c
authentication.current_user
n
authentication.current_user
c
authentication.current_user
authentication
request
authentication.request
authentication
c
n
nn
authentication
n
authentication.request
authentication
n
authentication
c
request.headers
request
c
a
b = @user
@user
n
a = @user
@user
c
@user_attributes[:email]
@user_attributes
@user_attributes.email
user_response[:email]
user_response
